<script>
  document.addEventListener('DOMContentLoaded', function() {
    const socket = io();
    // Live chat logic
    const chatForm = document.getElementById('chatForm');
    const chatInput = document.getElementById('chatInput');
    const chatMessages = document.getElementById('chatMessages');
  const senderName = '<%= user ? user.username : "Admin" %>';

    chatForm.addEventListener('submit', function(e) {
      e.preventDefault();
      const msg = chatInput.value.trim();
      if (msg) {
        socket.emit('chatMessage', { sender: senderName, message: msg });
        chatInput.value = '';
      }
    });

    socket.on('chatMessage', function(data) {
      const time = new Date(data.timestamp).toLocaleTimeString();
      const msgHtml = `<div class="mb-1"><span class="fw-bold text-primary">${data.sender}</span> <span class="text-muted small">[${time}]</span>: ${data.message}</div>`;
      chatMessages.insertAdjacentHTML('beforeend', msgHtml);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    });
  });
</script>
<div class="row g-4">
  <div class="col-lg-8">
    <div class="card auction-control-card mb-4 shadow-lg border-0">
      <div class="card-header bg-gradient-primary text-white d-flex justify-content-between align-items-center py-3 rounded-top">
        <h4 class="mb-0"><i class="bi bi-hammer me-2"></i> Auction Control</h4>
  <div class="btn-group d-flex gap-2" role="group" aria-label="Auction Timer Controls">
          <button id="startTimer" class="btn btn-success btn-lg rounded-start px-4 py-2 d-flex align-items-center gap-2 auction-btn">
            <i class="bi bi-play-circle-fill fs-5"></i> <span>Start</span>
          </button>
          <button id="stopTimer" class="btn btn-secondary btn-lg px-4 py-2 d-flex align-items-center gap-2 auction-btn">
            <i class="bi bi-pause-circle-fill fs-5"></i> <span>Pause</span>
          </button>
          <button id="endAuction" class="btn btn-danger btn-lg rounded-end px-4 py-2 d-flex align-items-center gap-2 auction-btn">
            <i class="bi bi-flag-fill fs-5"></i> <span>End</span>
          </button>
        </div>
      </div>
      <div class="card-body p-4 bg-light">
        <% if (currentPlayer) { %>
          <div class="row g-4 align-items-center">
            <div class="col-md-4 text-center">
              <div class="player-image-container mb-3 mx-auto border border-3 border-primary-subtle">
                <img src="<%= currentPlayer.image %>" alt="<%= currentPlayer.name %>" class="img-fluid rounded-circle shadow-lg">
              </div>
            </div>
            <div class="col-md-8">
              <h3 class="player-name mb-3 text-primary"><%= currentPlayer.name %></h3>
              <div class="player-details mb-4">
                <div class="row g-2">
                  <!-- Live Chat Box -->
                  <div class="card mb-3" id="auctionChatBox" style="max-width: 100%;">
                    <div class="card-header bg-primary text-white py-2">
                      <h6 class="mb-0"><i class="bi bi-chat-dots me-1"></i> Auction Chat</h6>
                    </div>
                    <div class="card-body p-2" style="height: 200px; overflow-y: auto;" id="chatMessages">
                      <!-- Messages will appear here -->
                    </div>
                    <div class="card-footer p-2">
                      <form id="chatForm" class="d-flex gap-2">
                        <input type="text" id="chatInput" class="form-control form-control-sm" placeholder="Type a message..." autocomplete="off" required>
                        <button type="submit" class="btn btn-sm btn-primary">Send</button>
                      </form>
                    </div>
                  </div>
                  <div class="col-6"><span class="detail-label">Role:</span> <%= currentPlayer.role %></div>
                  <div class="col-6"><span class="detail-label">Base Price:</span> <span class="price-tag">₹<%= currentPlayer.basePrice.toLocaleString() %></span></div>
                  <div class="col-6"><span class="detail-label">Current Bid:</span> <span class="current-bid">₹<%= currentPlayer.currentBid.toLocaleString() %></span></div>
                  <div class="col-6"><span class="detail-label">Status:</span> 
                    <% if (currentPlayer.status === 'sold') { %>
                      <span class="badge bg-success status-badge">Sold</span>
                    <% } else if (currentPlayer.status === 'in-auction') { %>
                      <span class="badge bg-warning status-badge">In Auction</span>
                    <% } else { %>
                      <span class="badge bg-secondary status-badge">Unsold</span>
                    <% } %>
                  </div>
                </div>
              </div>
              <div class="timer-section mt-4">
                <div class="d-flex justify-content-start align-items-center mb-3 gap-3">
                  <div class="timer-container me-2">
                    <i class="bi bi-clock-history text-primary"></i>
                  </div>
                  <div class="timer-display">
                    <h5 id="timer" class="mb-0">01:00</h5>
                    <small class="text-muted">Time Remaining</small>
                  </div>
                </div>
                <div class="alert alert-info d-flex align-items-center mb-0 rounded-pill">
                  <i class="bi bi-info-circle me-2"></i>
                  <div>The timer controls are available in the header above.</div>
                </div>
              </div>
            </div>
          </div>
        <% } else { %>
          <div class="text-center py-5">
            <div class="empty-state-icon mb-3">
              <i class="bi bi-person-dash text-muted" style="font-size: 3rem;"></i>
            </div>
            <h4 class="fw-bold">No player currently in auction</h4>
            <p class="text-muted">Select a player from the list to start the auction</p>
          </div>
        <% } %>
      </div>
    </div>
  </div>
  
  <div class="col-lg-4">
    <div class="card players-card mb-4 shadow-lg border-0">
      <div class="card-header bg-gradient-primary text-white py-3 rounded-top">
        <div class="d-flex justify-content-between align-items-center">
          <h5 class="mb-0"><i class="bi bi-people me-2"></i> Players</h5>
          <div class="d-flex align-items-center gap-2">
            <div class="form-check form-switch me-2">
              <input class="form-check-input" type="checkbox" id="showUnsoldOnly" checked>
              <label class="form-check-label" for="showUnsoldOnly">
                Unsold only
              </label>
            </div>
            <button class="btn btn-outline-light btn-sm rounded-circle refresh-btn d-flex align-items-center justify-content-center" id="refreshPlayerList" title="Refresh">
              <i class="bi bi-arrow-clockwise"></i>
            </button>
          </div>
        </div>
      </div>
      <div class="card-body p-3 bg-light">
        <div class="mb-3">
          <div class="input-group">
            <span class="input-group-text bg-white border-end-0">
              <i class="bi bi-search"></i>
            </span>
            <input type="text" class="form-control border-start-0 ps-0" id="playerSearch" placeholder="Search players...">
          </div>
        </div>
        <div class="player-list" style="max-height: 400px; overflow-y: auto;">
          <% players.forEach(player => { %>
            <div class="card mb-2 player-item shadow-sm border-0 hover-shadow" 
                 data-player-id="<%= player._id %>" 
                 data-player-name="<%= player.name %>" 
                 data-player-role="<%= player.role %>" 
                 data-player-base-price="<%= player.basePrice %>" 
                 data-player-image="<%= player.image %>"
                 data-player-status="<%= player.status %>">
              <div class="card-body p-3">
                <div class="d-flex justify-content-between align-items-center">
                  <div class="player-info">
                    <h6 class="mb-1 player-name text-primary"><%= player.name %></h6>
                    <small class="text-muted"><%= player.role %></small>
                  </div>
                  <div class="player-meta">
                    <span class="badge <%= player.status === 'sold' ? 'bg-success' : player.status === 'in-auction' ? 'bg-warning' : 'bg-secondary' %> rounded-pill">
                      <%= player.status === 'sold' ? 'Sold' : player.status === 'in-auction' ? 'In Auction' : 'Unsold' %>
                    </span>
                    <span class="badge bg-white text-dark ms-2 rounded-pill border">₹<%= player.basePrice.toLocaleString() %></span>
                  </div>
                </div>
              </div>
            </div>
          <% }); %>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .auction-btn {
    transition: box-shadow 0.2s, transform 0.2s;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
  }
  .auction-btn:hover, .auction-btn:focus {
    box-shadow: 0 4px 16px rgba(0,0,0,0.15);
    transform: translateY(-2px) scale(1.04);
    z-index: 2;
  }
  /* Custom styles for enhanced design */
  .bg-gradient-primary {
    background: linear-gradient(135deg, #0d6efd, #0a58ca);
  }
  
  .auction-control-card, .players-card {
    border: none;
    border-radius: 12px;
    overflow: hidden;
    transition: transform 0.2s;
  }
  
  .auction-control-card:hover, .players-card:hover {
    transform: translateY(-2px);
  }
  
  .player-image-container {
    width: 150px;
    height: 150px;
    margin: 0 auto;
    border-radius: 50%;
    overflow: hidden;
    border: 4px solid #f8f9fa;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  }
  
  .player-image-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .player-name {
    font-weight: 600;
    color: #212529;
  }
  
  .detail-label {
    font-weight: 500;
    color: #6c757d;
    display: inline-block;
    width: 100px;
  }
  
  .price-tag, .current-bid {
    font-weight: 600;
    color: #0d6efd;
  }
  
  .status-badge {
    font-size: 0.85rem;
    padding: 0.4rem 0.8rem;
  }
  
  .timer-container {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: rgba(13, 110, 253, 0.1);
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .timer-display h5 {
    font-size: 1.5rem;
    font-weight: 600;
    color: #0d6efd;
  }
  
  .player-item {
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s;
  }
  
  .player-item:hover {
    background-color: #f8f9fa;
    transform: translateX(5px);
  }
  
  .player-item .player-name {
    font-weight: 500;
  }
  
  .player-meta .badge {
    font-size: 0.75rem;
  }
  
  .empty-state-icon {
    opacity: 0.5;
  }
  
  .refresh-btn {
    width: 32px;
    height: 32px;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  /* Custom scrollbar for player list */
  .player-list::-webkit-scrollbar {
    width: 6px;
  }
  
  .player-list::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
  }
  
  .player-list::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 10px;
  }
  
  .player-list::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const socket = io();
    let timerInterval;
    let timeLeft = 60; // 60 seconds
    
    // Join auction room
    socket.emit('joinAuction');
    
    // Listen for player list updates
    socket.on('playerListUpdated', function() {
      refreshPlayerList();
    });
    
    // Start auction for a player
    document.querySelectorAll('.player-item').forEach(item => {
      item.addEventListener('click', function() {
        const playerId = this.getAttribute('data-player-id');
        const playerName = this.getAttribute('data-player-name');
        const playerRole = this.getAttribute('data-player-role');
        const playerBasePrice = this.getAttribute('data-player-base-price');
        const playerImage = this.getAttribute('data-player-image');
        
        socket.emit('startAuction', {
          playerId
        });
      });
    });
    
    // Timer controls
    document.getElementById('startTimer').addEventListener('click', function() {
      if (!timerInterval) {
        timerInterval = setInterval(updateTimer, 1000);
        this.classList.add('active');
        document.getElementById('stopTimer').classList.remove('active');
      }
    });
    
    document.getElementById('stopTimer').addEventListener('click', function() {
      clearInterval(timerInterval);
      timerInterval = null;
      this.classList.add('active');
      document.getElementById('startTimer').classList.remove('active');
    });
    
    function updateTimer() {
      timeLeft--;
      const minutes = Math.floor(timeLeft / 60);
      const seconds = timeLeft % 60;
      const timerElement = document.getElementById('timer');
      timerElement.textContent = 
        `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
      
      // Change color as time runs out
      if (timeLeft <= 10) {
        timerElement.classList.add('text-danger');
      } else if (timeLeft <= 30) {
        timerElement.classList.add('text-warning');
      }
      
      socket.emit('timerUpdate', timeLeft);
      
      if (timeLeft <= 0) {
        clearInterval(timerInterval);
        timerInterval = null;
        document.getElementById('endAuction').click();
      }
    }
    
    // End auction
    document.getElementById('endAuction').addEventListener('click', function() {
      socket.emit('endAuction');
    });
    
    // Player search
    document.getElementById('playerSearch').addEventListener('input', function() {
      const searchTerm = this.value.toLowerCase();
      document.querySelectorAll('.player-item').forEach(item => {
        const playerName = item.getAttribute('data-player-name').toLowerCase();
        if (playerName.includes(searchTerm)) {
          item.style.display = 'block';
        } else {
          item.style.display = 'none';
        }
      });
    });
    
    // Show unsold only toggle
    document.getElementById('showUnsoldOnly').addEventListener('change', function() {
      filterPlayerList();
    });
    
    // Refresh player list
    document.getElementById('refreshPlayerList').addEventListener('click', function() {
      // Add rotation animation to refresh icon
      const icon = this.querySelector('i');
      icon.classList.add('rotate-animation');
      setTimeout(() => {
        icon.classList.remove('rotate-animation');
      }, 1000);
      
      refreshPlayerList();
    });
    
    function filterPlayerList() {
      const showUnsoldOnly = document.getElementById('showUnsoldOnly').checked;
      
      document.querySelectorAll('.player-item').forEach(item => {
        const status = item.getAttribute('data-player-status');
        if (showUnsoldOnly && status !== 'unsold') {
          item.style.display = 'none';
        } else {
          item.style.display = 'block';
        }
      });
    }
    
    function refreshPlayerList() {
      fetch('/admin/auction')
        .then(response => response.text())
        .then(html => {
          // Create a temporary DOM element to parse the HTML
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = html;
          
          // Extract the player list from the response
          const newPlayerList = tempDiv.querySelector('.player-list');
          
          // Replace the current player list with the new one
          document.querySelector('.player-list').innerHTML = newPlayerList.innerHTML;
          
          // Re-attach event listeners
          document.querySelectorAll('.player-item').forEach(item => {
            item.addEventListener('click', function() {
              const playerId = this.getAttribute('data-player-id');
              const playerName = this.getAttribute('data-player-name');
              const playerRole = this.getAttribute('data-player-role');
              const playerBasePrice = this.getAttribute('data-player-base-price');
              const playerImage = this.getAttribute('data-player-image');
              
              socket.emit('startAuction', {
                playerId
              });
            });
          });
          
          // Apply current filter
          filterPlayerList();
        })
        .catch(error => {
          console.error('Error refreshing player list:', error);
        });
    }
    
    // Add CSS animation for refresh icon
    const style = document.createElement('style');
    style.textContent = `
      @keyframes rotate {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
      }
      .rotate-animation {
        animation: rotate 1s linear;
      }
    `;
    document.head.appendChild(style);
  });
</script>